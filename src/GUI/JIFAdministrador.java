package GUI;

import Domain.Sistema.SistemaSingleton;
import Domain.Sistema.Usuario;
import Domain.Sistema.UsuarioAdministrador;
import Domain.Sistema.UsuarioExaminador;
import Utility.Utility;
import java.awt.Dimension;

import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class JIFAdministrador extends javax.swing.JInternalFrame {

    private String[] datos;
    private int oldDatosCount;
    private boolean flag_actualizarLista;
    private boolean flag_datosActualizados;

    private Thread hiloActualizarDatos;
    protected boolean hiloActualizarDatos_running;

    private Thread hiloActualizarGUI;
    protected boolean hiloActualizarGUI_running;

    public JIFAdministrador() {
        initComponents();
        Dimension jfSize = JFWindow.getInstance().getSize();
        Dimension jifSize = this.getSize();
        this.setLocation((jfSize.width - jifSize.width) / 2, (((jfSize.height - JFWindow.getInstance().jF_jMenuBar.getHeight()) - jifSize.height) / 2));
        this.show();
        initThreads();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane = new javax.swing.JTabbedPane();
        RegistrarUsuario = new javax.swing.JPanel();
        jTextFieldNombreUsuarioRegistrar = new javax.swing.JTextField();
        jTextFieldPasswordRegistrar = new javax.swing.JTextField();
        jLabelUsernameRegistrar = new javax.swing.JLabel();
        jLabelPasswordRegistrar = new javax.swing.JLabel();
        jButtonRegistrarUsuario = new javax.swing.JButton();
        jComboBoxRol = new javax.swing.JComboBox<>();
        jCheckBoxAdmin = new javax.swing.JCheckBox();
        jLabelRol = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanelEliminarUsuario = new javax.swing.JPanel();
        jTextFieldNombreUsuarioEliminar = new javax.swing.JTextField();
        jButtonBuscarEliminar = new javax.swing.JButton();
        jButtonEliminarUsuario = new javax.swing.JButton();
        jLabelUsernameEliminar = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListUsuarios = new javax.swing.JList<>();

        setClosable(true);
        setIconifiable(true);
        setTitle("Administrador: "+SistemaSingleton.getInstance().getUsuario().getUsername());
        setVisible(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabelUsernameRegistrar.setForeground(new java.awt.Color(0, 0, 0));
        jLabelUsernameRegistrar.setText("Username:");

        jLabelPasswordRegistrar.setForeground(new java.awt.Color(0, 0, 0));
        jLabelPasswordRegistrar.setText("Password:");

        jButtonRegistrarUsuario.setText("Registrar");
        jButtonRegistrarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegistrarUsuarioActionPerformed(evt);
            }
        });

        jComboBoxRol.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { Utility.ROL_DIGITADOR, Utility.ROL_GESTOR, Utility.ROL_ANALISTA}));

        jCheckBoxAdmin.setText("ADMIN");
        jCheckBoxAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAdminActionPerformed(evt);
            }
        });

        jLabelRol.setForeground(new java.awt.Color(0, 0, 0));
        jLabelRol.setText("Rol:");

        javax.swing.GroupLayout RegistrarUsuarioLayout = new javax.swing.GroupLayout(RegistrarUsuario);
        RegistrarUsuario.setLayout(RegistrarUsuarioLayout);
        RegistrarUsuarioLayout.setHorizontalGroup(
            RegistrarUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RegistrarUsuarioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RegistrarUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RegistrarUsuarioLayout.createSequentialGroup()
                        .addComponent(jLabelUsernameRegistrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 163, Short.MAX_VALUE)
                        .addComponent(jTextFieldNombreUsuarioRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RegistrarUsuarioLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonRegistrarUsuario))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RegistrarUsuarioLayout.createSequentialGroup()
                        .addComponent(jLabelPasswordRegistrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 166, Short.MAX_VALUE)
                        .addGroup(RegistrarUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxAdmin)
                            .addComponent(jTextFieldPasswordRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(RegistrarUsuarioLayout.createSequentialGroup()
                        .addComponent(jLabelRol)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBoxRol, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(145, 145, 145)))
                .addContainerGap())
        );
        RegistrarUsuarioLayout.setVerticalGroup(
            RegistrarUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RegistrarUsuarioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RegistrarUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldNombreUsuarioRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelUsernameRegistrar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RegistrarUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPasswordRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPasswordRegistrar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxAdmin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RegistrarUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelRol)
                    .addComponent(jComboBoxRol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                .addComponent(jButtonRegistrarUsuario)
                .addContainerGap())
        );

        jTabbedPane.addTab("Registrar Usuario", RegistrarUsuario);

        jPanelEliminarUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanelEliminarUsuarioMousePressed(evt);
            }
        });

        jButtonBuscarEliminar.setText("Buscar");
        jButtonBuscarEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarEliminarActionPerformed(evt);
            }
        });

        jButtonEliminarUsuario.setText("Eliminar");
        jButtonEliminarUsuario.setEnabled(false);
        jButtonEliminarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarUsuarioActionPerformed(evt);
            }
        });

        jLabelUsernameEliminar.setForeground(new java.awt.Color(0, 0, 0));
        jLabelUsernameEliminar.setText("Username:");

        jListUsuarios.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListUsuarios.setEnabled(false);
        jListUsuarios.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListUsuariosValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListUsuarios);

        javax.swing.GroupLayout jPanelEliminarUsuarioLayout = new javax.swing.GroupLayout(jPanelEliminarUsuario);
        jPanelEliminarUsuario.setLayout(jPanelEliminarUsuarioLayout);
        jPanelEliminarUsuarioLayout.setHorizontalGroup(
            jPanelEliminarUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEliminarUsuarioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelEliminarUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelEliminarUsuarioLayout.createSequentialGroup()
                        .addComponent(jLabelUsernameEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 163, Short.MAX_VALUE)
                        .addGroup(jPanelEliminarUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonBuscarEliminar, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldNombreUsuarioEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelEliminarUsuarioLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonEliminarUsuario))
                    .addComponent(jSeparator2)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanelEliminarUsuarioLayout.setVerticalGroup(
            jPanelEliminarUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEliminarUsuarioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelEliminarUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldNombreUsuarioEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelUsernameEliminar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonBuscarEliminar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonEliminarUsuario)
                .addContainerGap())
        );

        jTabbedPane.addTab("Eliminar Usuario", jPanelEliminarUsuario);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleName("Administrador: ");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRegistrarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegistrarUsuarioActionPerformed

        String username = this.jTextFieldNombreUsuarioRegistrar.getText();
        String password = this.jTextFieldPasswordRegistrar.getText();

        if (username.equals("") || password.equals("")) {
            JOptionPane.showMessageDialog(this, "Campos vacíos", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            //request - response
            if (!SistemaSingleton.getInstance().getUsuarioBusiness().exists(username)) {

                Usuario usuario = null;
                if (this.jCheckBoxAdmin.isSelected()) {
                    usuario = new UsuarioAdministrador(username, password);
                } else {
                    usuario = new UsuarioExaminador(username, password);
                    ((UsuarioAdministrador) SistemaSingleton.getInstance().getUsuario()).asignarRol((UsuarioExaminador) usuario, this.jComboBoxRol.getSelectedItem().toString());
                }
                try {
                    //request - response
                    if (SistemaSingleton.getInstance().getUsuarioBusiness().saveNewUsuario(usuario)) {
                        JOptionPane.showMessageDialog(this, "Usuario registrado con exito", "Exito", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "Usuario no registrado", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (IOException | NoSuchAlgorithmException ex) {
                    Logger.getLogger(JIFAdministrador.class.getName()).log(Level.SEVERE, null, ex);
                }
                this.jTextFieldNombreUsuarioRegistrar.setText("");
                this.jTextFieldPasswordRegistrar.setText("");
                this.jComboBoxRol.setSelectedIndex(0);
                this.jCheckBoxAdmin.setSelected(false);
                this.jComboBoxRol.setVisible(true);
                this.jLabelRol.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "Nombre de usuario no disponible", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonRegistrarUsuarioActionPerformed

    private void jCheckBoxAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAdminActionPerformed
        // TODO add your handling code here:
        if (jCheckBoxAdmin.isSelected()) {
            this.jComboBoxRol.setVisible(false);
            this.jLabelRol.setVisible(false);
        } else {
            this.jComboBoxRol.setVisible(true);
            this.jLabelRol.setVisible(true);
        }
    }//GEN-LAST:event_jCheckBoxAdminActionPerformed

    private void jButtonEliminarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarUsuarioActionPerformed
        // TODO add your handling code here:
        String username = this.jListUsuarios.getSelectedValue();
        if (!username.isBlank()) {
            try {
                //request - response
                if (SistemaSingleton.getInstance().getUsuarioBusiness().deleteUsuario(username)) {
                    JOptionPane.showMessageDialog(this, "Usuario eliminado", "Exito", JOptionPane.INFORMATION_MESSAGE);
                    this.jTextFieldNombreUsuarioEliminar.setText("");
                    synchronized (this) {
                        this.flag_actualizarLista = true;
                        notifyAll();
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Error al eliminar el usuario", "Error", JOptionPane.ERROR_MESSAGE);
                }

            } catch (IOException ex) {
                Logger.getLogger(JIFAdministrador.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un usuario", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButtonEliminarUsuarioActionPerformed

    private void jButtonBuscarEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarEliminarActionPerformed
        // TODO add your handling code here:
        String username = this.jTextFieldNombreUsuarioEliminar.getText().toLowerCase();
        String message = "";
        if (!username.isBlank()) {
            //request - response
            if (SistemaSingleton.getInstance().getUsuarioBusiness().exists(username)) {
                if (username.equals(SistemaSingleton.getInstance().getUsuario().getUsername())) {
                    message = "El usuario actual no puede ser borrado";
                    this.jListUsuarios.setEnabled(false);
                    this.jButtonEliminarUsuario.setEnabled(false);
                } else {
                    message = username;
                    this.jListUsuarios.setEnabled(true);
                }
            } else {
                message = "Usuario no encontrado";
                this.jListUsuarios.setEnabled(false);
                this.jButtonEliminarUsuario.setEnabled(false);
            }
            final String s = message;
            this.jListUsuarios.setModel(new javax.swing.AbstractListModel<String>() {

                String[] strings = new String[]{s};

                public int getSize() {
                    return strings.length;
                }

                public String getElementAt(int i) {
                    return strings[i];
                }

            });
        } else {
            synchronized (this) {
                flag_actualizarLista = true;
                notifyAll();
            }
        }
    }//GEN-LAST:event_jButtonBuscarEliminarActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:
        JFWindow.getInstance().jF_jMenuItemGestionUsuarios.setEnabled(true);
        killThreads();
    }//GEN-LAST:event_formInternalFrameClosed

    private void jPanelEliminarUsuarioMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelEliminarUsuarioMousePressed
        // TODO add your handling code here:
        this.jListUsuarios.clearSelection();
        if (this.jTextFieldNombreUsuarioEliminar.getText().isBlank()) {
            synchronized (this) {
                flag_actualizarLista = true;
                notifyAll();
            }
        }
    }//GEN-LAST:event_jPanelEliminarUsuarioMousePressed

    private void jListUsuariosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListUsuariosValueChanged
        // TODO add your handling code here:
        if (this.jListUsuarios.getSelectedIndex() != -1) {
            this.jButtonEliminarUsuario.setEnabled(true);
        } else {
            this.jButtonEliminarUsuario.setEnabled(false);
        }
    }//GEN-LAST:event_jListUsuariosValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel RegistrarUsuario;
    private javax.swing.JButton jButtonBuscarEliminar;
    private javax.swing.JButton jButtonEliminarUsuario;
    private javax.swing.JButton jButtonRegistrarUsuario;
    private javax.swing.JCheckBox jCheckBoxAdmin;
    private javax.swing.JComboBox<String> jComboBoxRol;
    private javax.swing.JLabel jLabelPasswordRegistrar;
    private javax.swing.JLabel jLabelRol;
    private javax.swing.JLabel jLabelUsernameEliminar;
    private javax.swing.JLabel jLabelUsernameRegistrar;
    private javax.swing.JList<String> jListUsuarios;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelEliminarUsuario;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTextField jTextFieldNombreUsuarioEliminar;
    private javax.swing.JTextField jTextFieldNombreUsuarioRegistrar;
    private javax.swing.JTextField jTextFieldPasswordRegistrar;
    // End of variables declaration//GEN-END:variables

    private void initThreads() {
        this.datos = new String[0];
        this.flag_actualizarLista = false;
        this.flag_datosActualizados = true;

        this.hiloActualizarDatos_running = true;
        this.hiloActualizarDatos = new Thread(new Runnable() {
            @Override
            public void run() {
                while (hiloActualizarDatos_running) {
                    try {
                        int n = 1000;
                        Thread.sleep(n);
                        actualizarDatos();
                    } catch (InterruptedException ex) {
                        Logger.getLogger(JIFDigitador.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
                System.out.println(hiloActualizarDatos.getName() + " killed");
            }//run
        }, "hiloActualizarDatos_JIFAdministrador");
        this.hiloActualizarDatos.start();

        this.hiloActualizarGUI_running = true;
        this.hiloActualizarGUI = new Thread(new Runnable() {
            @Override
            public void run() {
                while (hiloActualizarDatos_running) {
                    actualizarGUI();
                }
                System.out.println(hiloActualizarGUI.getName() + " killed");
            }//run

        }, "hiloActualizarGUI_JIFAdministrador");
        this.hiloActualizarGUI.start();

    }//initThreads

    public synchronized void killThreads() {
        this.hiloActualizarDatos_running = false;
        this.hiloActualizarGUI_running = false;
        this.flag_actualizarLista = true;
        notifyAll();
    }//killThreads

    private synchronized void actualizarDatos() {
        this.flag_datosActualizados = false;
        //request - response
        List<String> usuarios = SistemaSingleton.getInstance().getUsuarioBusiness().loadNombresUsuarios();
        //formato
        Usuario usuarioActual = SistemaSingleton.getInstance().getUsuario();
        if (usuarioActual != null) {
            usuarios.remove(usuarioActual.getUsername());
            oldDatosCount = datos.length;
            datos = new String[usuarios.size()];
            int j = 0;
            for (String nombre : usuarios) {
                datos[j] = nombre;
                j++;
            }
            this.flag_datosActualizados = true;
            if (datos.length > oldDatosCount) {
                this.flag_actualizarLista = true;
                notifyAll();
                System.out.println("datos nuevos");
            }
        }

    }//actualizarDatos

    private synchronized void actualizarGUI() {
        if (!flag_actualizarLista || !flag_datosActualizados) {
            try {
                wait();
            } catch (InterruptedException ex) {
                Logger.getLogger(JIFAdministrador.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            actualizarLista();
            this.flag_actualizarLista = false;
        }
    }//actualizarGUI

    private void actualizarLista() {
        this.jListUsuarios.setEnabled(true);
        this.jButtonEliminarUsuario.setEnabled(false);
        this.jListUsuarios.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = datos;

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
    }//actualizarLista

}//class
